"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"function"==typeof define&&define.amd?define("scripts",e):e()}(function(){var r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t,n=e(function(e){var t,n;t=r,n=function(){function m(e,t,n){if(n){var r=document.createDocumentFragment(),i=!t.hasAttribute("viewBox")&&n.getAttribute("viewBox");i&&t.setAttribute("viewBox",i);for(var o=n.cloneNode(!0);o.childNodes.length;)r.appendChild(o.firstChild);e.appendChild(r)}}function v(r){r.onreadystatechange=function(){if(4===r.readyState){var n=r._cachedDocument;n||((n=r._cachedDocument=document.implementation.createHTMLDocument("")).body.innerHTML=r.responseText,r._cachedTarget={}),r._embeds.splice(0).map(function(e){var t=r._cachedTarget[e.id];t=t||(r._cachedTarget[e.id]=n.getElementById(e.id)),m(e.parent,e.svg,t)})}},r.onreadystatechange()}function b(e){for(var t=e;"svg"!==t.nodeName.toLowerCase()&&(t=t.parentNode););return t}return function(e){var u,d=Object(e),t=window.top!==window.self;u="polyfill"in d?d.polyfill:/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||/\bEdge\/.(\d+)\b/.test(navigator.userAgent)&&t;var f={},h=window.requestAnimationFrame||setTimeout,p=document.getElementsByTagName("use"),g=0;u&&function e(){for(var t=0;t<p.length;){var n=p[t],r=n.parentNode,i=b(r),o=n.getAttribute("xlink:href")||n.getAttribute("href");if(!o&&d.attributeName&&(o=n.getAttribute(d.attributeName)),i&&o){if(u)if(!d.validate||d.validate(o,i,n)){r.removeChild(n);var l=o.split("#"),a=l.shift(),c=l.join("#");if(a.length){var s=f[a];s||((s=f[a]=new XMLHttpRequest).open("GET",a),s.send(),s._embeds=[]),s._embeds.push({parent:r,svg:i,id:c}),v(s)}else m(r,i,document.getElementById(c))}else++t,++g}else++t}(!p.length||0<p.length-g)&&h(e,67)}()}},e.exports?e.exports=n():t.svg4everybody=n()}),i=e(function(e,t){var n;n=function(){return r={},i.m=n=[function(e,t,n){n.r(t);function r(e){return Array.isArray(e)?e:[e]}function c(e){return e instanceof Node}function i(e,t){if(e&&t){e=e instanceof NodeList?e:[e];for(var n=0;n<e.length&&!0!==t(e[n],n,e.length);n++);}}function o(e){return console.error("[scroll-lock] ".concat(e))}function m(e){if(Array.isArray(e))return e.join(", ")}function l(e){var t=[];return i(e,function(e){return t.push(e)}),t}function v(e,t,n,r){var i=3<arguments.length&&void 0!==r?r:document;if((!(2<arguments.length&&void 0!==n)||n)&&-1!==l(i.querySelectorAll(t)).indexOf(e))return e;for(;(e=e.parentElement)&&-1===l(i.querySelectorAll(t)).indexOf(e););return e}function b(e,t,n){var r=2<arguments.length&&void 0!==n?n:document;return-1!==l(r.querySelectorAll(t)).indexOf(e)}function a(e){return e&&"hidden"===getComputedStyle(e).overflow}function y(e){return e&&(!!a(e)||e.scrollTop<=0)}function S(e){if(e){if(a(e))return 1;var t=e.scrollTop;return e.scrollHeight<=t+e.offsetHeight}}function w(e){return e&&(!!a(e)||e.scrollLeft<=0)}function k(e){if(e){if(a(e))return 1;var t=e.scrollLeft;return e.scrollWidth<=t+e.offsetWidth}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"disablePageScroll",function(){return d}),n.d(t,"enablePageScroll",function(){return f}),n.d(t,"getScrollState",function(){return h}),n.d(t,"clearQueueScrollLocks",function(){return p}),n.d(t,"getTargetScrollBarWidth",function(){return g}),n.d(t,"getCurrentTargetScrollBarWidth",function(){return A}),n.d(t,"getPageScrollBarWidth",function(){return L}),n.d(t,"getCurrentPageScrollBarWidth",function(){return E}),n.d(t,"addScrollableTarget",function(){return O}),n.d(t,"removeScrollableTarget",function(){return T}),n.d(t,"addScrollableSelector",function(){return x}),n.d(t,"removeScrollableSelector",function(){return P}),n.d(t,"addLockableTarget",function(){return q}),n.d(t,"addLockableSelector",function(){return F}),n.d(t,"setFillGapMethod",function(){return j}),n.d(t,"addFillGapTarget",function(){return B}),n.d(t,"removeFillGapTarget",function(){return G}),n.d(t,"addFillGapSelector",function(){return C}),n.d(t,"removeFillGapSelector",function(){return W}),n.d(t,"refillGaps",function(){return N});var u=["padding","margin","width","max-width","none"],M={scroll:!0,queue:0,scrollableSelectors:["[data-scroll-lock-scrollable]"],lockableSelectors:["body","[data-scroll-lock-lockable]"],fillGapSelectors:["body","[data-scroll-lock-fill-gap]","[data-scroll-lock-lockable]"],fillGapMethod:u[0],startTouchY:0,startTouchX:0},d=function(e){M.queue<=0&&(M.scroll=!1,I(),$()),O(e),M.queue++},f=function(e){0<M.queue&&M.queue--,M.queue<=0&&(M.scroll=!0,Y(),U()),T(e)},h=function(){return M.scroll},p=function(){M.queue=0},g=function(e,t){var n=1<arguments.length&&void 0!==t&&t;if(c(e)){var r=e.style.overflowY;n?h()||(e.style.overflowY=e.getAttribute("data-scroll-lock-saved-overflow-y-property")):e.style.overflowY="scroll";var i=A(e);return e.style.overflowY=r,i}return 0},A=function(e){if(c(e)){if(e===document.body){var t=document.documentElement.clientWidth;return window.innerWidth-t}var n=e.style.borderLeftWidth,r=e.style.borderRightWidth;e.style.borderLeftWidth="0px",e.style.borderRightWidth="0px";var i=e.offsetWidth-e.clientWidth;return e.style.borderLeftWidth=n,e.style.borderRightWidth=r,i}return 0},L=function(e){var t=0<arguments.length&&void 0!==e&&e;return g(document.body,t)},E=function(){return A(document.body)},O=function(e){e&&r(e).map(function(e){i(e,function(e){c(e)?e.setAttribute("data-scroll-lock-scrollable",""):o('"'.concat(e,'" is not a Element.'))})})},T=function(e){e&&r(e).map(function(e){i(e,function(e){c(e)?e.removeAttribute("data-scroll-lock-scrollable"):o('"'.concat(e,'" is not a Element.'))})})},x=function(e){e&&r(e).map(function(e){M.scrollableSelectors.push(e)})},P=function(e){e&&r(e).map(function(t){M.scrollableSelectors=M.scrollableSelectors.filter(function(e){return e!==t})})},q=function(e){e&&(r(e).map(function(e){i(e,function(e){c(e)?e.setAttribute("data-scroll-lock-lockable",""):o('"'.concat(e,'" is not a Element.'))})}),h()||I())},F=function(e){e&&(r(e).map(function(e){M.lockableSelectors.push(e)}),h()||I(),C(e))},j=function(e){if(e)if(-1!==u.indexOf(e))M.fillGapMethod=e,N();else{var t=u.join(", ");o('"'.concat(e,'" method is not available!\nAvailable fill gap methods: ').concat(t,"."))}},B=function(e){e&&r(e).map(function(e){i(e,function(e){c(e)?(e.setAttribute("data-scroll-lock-fill-gap",""),M.scroll||X(e)):o('"'.concat(e,'" is not a Element.'))})})},G=function(e){e&&r(e).map(function(e){i(e,function(e){c(e)?(e.removeAttribute("data-scroll-lock-fill-gap"),M.scroll||Q(e)):o('"'.concat(e,'" is not a Element.'))})})},C=function(e){e&&r(e).map(function(e){-1===M.fillGapSelectors.indexOf(e)&&(M.fillGapSelectors.push(e),M.scroll||K(e))})},W=function(e){e&&r(e).map(function(t){M.fillGapSelectors=M.fillGapSelectors.filter(function(e){return e!==t}),M.scroll||V(t)})},N=function(){M.scroll||$()},I=function(){var e=m(M.lockableSelectors);R(e)},Y=function(){var e=m(M.lockableSelectors);_(e)},R=function(e){var t=document.querySelectorAll(e);i(t,function(e){H(e)})},_=function(e){var t=document.querySelectorAll(e);i(t,function(e){D(e)})},H=function(e){if(c(e)&&"true"!==e.getAttribute("data-scroll-lock-locked")){var t=window.getComputedStyle(e);e.setAttribute("data-scroll-lock-saved-overflow-y-property",t.overflowY),e.setAttribute("data-scroll-lock-saved-inline-overflow-property",e.style.overflow),e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property",e.style.overflowY),e.style.overflow="hidden",e.setAttribute("data-scroll-lock-locked","true")}},D=function(e){c(e)&&"true"===e.getAttribute("data-scroll-lock-locked")&&(e.style.overflow=e.getAttribute("data-scroll-lock-saved-inline-overflow-property"),e.style.overflowY=e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-saved-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-locked"))},$=function(){M.fillGapSelectors.map(function(e){K(e)})},U=function(){M.fillGapSelectors.map(function(e){V(e)})},K=function(e){var t=document.querySelectorAll(e),n=-1!==M.lockableSelectors.indexOf(e);i(t,function(e){X(e,n)})},X=function(e,t){var n=1<arguments.length&&void 0!==t&&t;if(c(e)){var r;if(""===e.getAttribute("data-scroll-lock-lockable")||n)r=g(e,!0);else{var i=v(e,m(M.lockableSelectors));r=g(i,!0)}"true"===e.getAttribute("data-scroll-lock-filled-gap")&&Q(e);var o=window.getComputedStyle(e);if(e.setAttribute("data-scroll-lock-filled-gap","true"),e.setAttribute("data-scroll-lock-current-fill-gap-method",M.fillGapMethod),"margin"===M.fillGapMethod){var l=parseFloat(o.marginRight);e.style.marginRight="".concat(l+r,"px")}else if("width"===M.fillGapMethod)e.style.width="calc(100% - ".concat(r,"px)");else if("max-width"===M.fillGapMethod)e.style.maxWidth="calc(100% - ".concat(r,"px)");else if("padding"===M.fillGapMethod){var a=parseFloat(o.paddingRight);e.style.paddingRight="".concat(a+r,"px")}}},V=function(e){var t=document.querySelectorAll(e);i(t,function(e){Q(e)})},Q=function(e){if(c(e)&&"true"===e.getAttribute("data-scroll-lock-filled-gap")){var t=e.getAttribute("data-scroll-lock-current-fill-gap-method");e.removeAttribute("data-scroll-lock-filled-gap"),e.removeAttribute("data-scroll-lock-current-fill-gap-method"),"margin"===t?e.style.marginRight="":"width"===t?e.style.width="":"max-width"===t?e.style.maxWidth="":"padding"===t&&(e.style.paddingRight="")}};"undefined"!=typeof window&&window.addEventListener("resize",function(){N()}),"undefined"!=typeof document&&(document.addEventListener("touchstart",function(e){M.scroll||(M.startTouchY=e.touches[0].clientY,M.startTouchX=e.touches[0].clientX)}),document.addEventListener("touchmove",function(l){if(!M.scroll){var e=M.startTouchY,t=M.startTouchX,n=l.touches[0].clientY,r=l.touches[0].clientX;if(l.touches.length<2){var a=m(M.scrollableSelectors),c=e<n,s=n<e,u=t<r,d=r<t,f=e+3<n,h=n<e-3,p=t+3<r,g=r<t-3;!function e(t,n){var r=1<arguments.length&&void 0!==n&&n;if(t){var i=v(t,a,!1);if(b(t,'input[type="range"]'))return!1;if(r||b(t,'textarea, [contenteditable="true"]')&&v(t,a)||b(t,a)){var o=!1;w(t)&&k(t)?(c&&y(t)||s&&S(t))&&(o=!0):y(t)&&S(t)?(u&&w(t)||d&&k(t))&&(o=!0):(f&&y(t)||h&&S(t)||p&&w(t)||g&&k(t))&&(o=!0),o&&(i?e(i,!0):l.cancelable&&l.preventDefault())}else e(i)}else l.cancelable&&l.preventDefault()}(l.target)}}},{passive:!1}),document.addEventListener("touchend",function(){M.scroll||(M.startTouchY=0,M.startTouchX=0)}));var Z={hide:function(e){o('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'),d(e)},show:function(e){o('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'),f(e)},toggle:function(e){o('"toggle" is deprecated! Do not use it.'),h()?d():f(e)},getState:function(){return o('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'),h()},getWidth:function(){return o('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'),L()},getCurrentWidth:function(){return o('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'),E()},setScrollableTargets:function(e){o('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'),O(e)},setFillGapSelectors:function(e){o('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'),C(e)},setFillGapTargets:function(e){o('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'),B(e)},clearQueue:function(){o('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'),p()}},z=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){s(t,e,n[e])})}return t}({disablePageScroll:d,enablePageScroll:f,getScrollState:h,clearQueueScrollLocks:p,getTargetScrollBarWidth:g,getCurrentTargetScrollBarWidth:A,getPageScrollBarWidth:L,getCurrentPageScrollBarWidth:E,addScrollableSelector:x,removeScrollableSelector:P,addScrollableTarget:O,removeScrollableTarget:T,addLockableSelector:F,addLockableTarget:q,addFillGapSelector:C,removeFillGapSelector:W,addFillGapTarget:B,removeFillGapTarget:G,setFillGapMethod:j,refillGaps:N,_state:M},Z);t.default=z}],i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"===_typeof(t)&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0).default;function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}var n,r},e.exports=n()}),o=(t=i)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d=function(){function n(e){var t=this;a(this,n),this.container=document.querySelector(e),this.schem={mainMenu:"[data-main-bar]",mainMenuNav:"[data-main-nav]",mainToggle:"[data-main-toggle]",subitems:"[data-main-subitem]",subitemToggle:"[data-subitem-toggle]",subitemList:"[data-subitem-list]"},this.mainSubitems=[],this.mainToggles=[],this.mainMenu=null,this.mainMenuNav=null,this.state={menuOpen:!1,isSublistExpanded:!1,expandedSublist:null,isHidden:!1,width:window.innerWidth},this.scrollDistance=0,this.classes={menuOpen:"is-open",pageScroll:"is-scroll",submenuOpen:"is-expanded",hidden:"is-invisible"},this.container&&(this.initMobileMenu(),this.initScrollListener(),document.addEventListener("keydown",function(e){"Escape"===e.key&&t.closeMenu()}))}return s(n,[{key:"initMobileMenu",value:function(){var t=this;this.mainMenu=this.container.querySelector(this.schem.mainMenu),this.mainMenuNav=this.container.querySelector(this.schem.mainMenuNav),this.mainToggles=Array.prototype.slice.call(this.container.querySelectorAll(this.schem.mainToggle)),this.mainToggles.forEach(function(e){console.log("ssss"),e.addEventListener("click",function(){console.log("clic"),!1===t.state.menuOpen?(console.log("op"),t.openMenu()):(console.log("hi"),t.closeMenu())})}),window.addEventListener("resize",function(){window.innerWidth!==t.state.width&&t.state.menuOpen&&t.closeMenu(),t.state.width=window.innerWidth})}},{key:"initScrollListener",value:function(){var t=this;window.addEventListener("scroll",function(){var e=window.pageYOffset>t.scrollDistance;t.mainMenu.classList.toggle(t.classes.pageScroll,e)})}},{key:"initSubMenu",value:function(){var n=this;Array.prototype.slice.call(this.container.querySelectorAll(this.schem.subitems)).forEach(function(e){n.mainSubitems.push({container:e,menu:e.querySelector(n.schem.subitemList),toggle:e.querySelector(n.schem.subitemToggle)})}),this.mainSubitems.forEach(function(t){t.toggle.addEventListener("click",function(e){n.expandSubMenu(t)})}),document.addEventListener("click",function(e){n.state.expandedSublist&&e.target!==n.state.expandedSublist.container&&!n.state.expandedSublist.container.contains(e.target)&&n.collapseSubMenu()})}},{key:"getHeight",value:function(){return this.mainMenu?this.mainMenu.offsetHeight:0}},{key:"toggleHidden",value:function(e){this.state.isHidden=e,this.mainMenu.classList.toggle(this.classes.hidden,this.state.isHidden)}},{key:"expandSubMenu",value:function(e){this.state.expandedSublist&&this.state.expandedSublist.menu.classList.remove(this.classes.submenuOpen),e.menu.classList.add(this.classes.submenuOpen),this.state.expandedSublist=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach(function(e){u(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},e)}},{key:"collapseSubMenu",value:function(){this.state.expandedSublist&&(this.state.expandedSublist.menu.classList.remove(this.classes.submenuOpen),this.state.expandedSublist=null)}},{key:"closeMenu",value:function(){this.state.menuOpen=!1,this.mainMenu.classList.remove(this.classes.menuOpen),this.mainMenuNav.classList.remove(this.classes.menuOpen),this.collapseSubMenu(),app.scroll.enable(this.mainMenuNav)}},{key:"openMenu",value:function(){this.state.menuOpen=!0,this.mainMenu.classList.add(this.classes.menuOpen),this.mainMenuNav.classList.add(this.classes.menuOpen),app.scroll.disable(this.mainMenuNav)}}]),n}(),f=function(){function n(e){var t=this;a(this,n),this.container=e,this.triggerBtn=this.container.querySelector("[data-test-api]"),this.requestResult=this.container.querySelector("[data-test-result]"),this.requestUrl=this.triggerBtn.dataset.testApi,this.triggerBtn.addEventListener("click",function(e){t.requestResponse()})}return s(n,[{key:"requestResponse",value:function(){var t=this;fetch(this.requestUrl).then(function(e){return e.json()}).then(function(e){e&&(t.requestResult.innerHTML=e.title+e.message)})}}]),n}(),h=function(){function t(e){var n=this;a(this,t),this.container=e,this.form=this.container.querySelector("form"),this.resultInput=this.container.querySelector("[data-results-input]"),this.cancel=this.container.querySelector("[data-button-cancel]"),this.validationRules={required:{test:function(e){return 0<=e.entry.value.length},error:function(){return"please fill in this field"}},email:{test:function(e){return/^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i.test(e.entry.value)||0===e.entry.value.length},error:function(){return"Please enter a valid email"}},phone:{test:function(e){return/^([+]?[0-9\s-\(\)]{3,25})*$/i.test(e.entry.value)||0===e.entry.value.length},error:function(){return"Please enter a valid phone number"}},address:{test:function(e){return 5<e.entry.value.length},error:function(){return"Please enter a valid address"}},name:{test:function(e){return 2<e.entry.value.length&&e.entry.value.length<20},error:function(e){return"Please enter a valid ".concat(e)}},message:{test:function(e){return 5<e.entry.value.length},error:function(){return"Please enter a valid message"}},checkif:{test:function(e){return!0===e.entry.checked},error:function(){return"Please checked field"}},suitable:{test:function(t){return 3<n.fileFields.filter(function(e){return e.name===t.entry.name&&!0===e.entry.checked}).length},error:function(){return"Please checked more options"}},select:{test:function(e){return 0<e.entry.selectedIndex},error:function(){return"Please checked more options"}}},this.fileFields=Array.prototype.slice.call(e.querySelectorAll("[data-validate]")).map(function(e){var t=e.closest("[data-field]");return{wrap:t,entry:e,name:e.name,value:e.value,type:e.type,checked:e.checked,message:t.querySelector("[data-validate-mess]"),rules:e.hasAttribute("data-validate")?e.dataset.validate.split("|"):[],validateName:e.hasAttribute("data-validate-as")?e.dataset.validateAs:e.name,isValid:null}}),this.fileFields.forEach(function(e){e.rules.length&&(e.entry.addEventListener("blur",function(){n.validateField(e)}),e.entry.addEventListener("input",function(){n.validateField(e)}))}),this.form.addEventListener("submit",function(e){e.preventDefault(),n.validateForm()&&(n.scrollToElement(),n.formResult())}),this.cancel.addEventListener("click",function(){n.fileFields.forEach(function(e){e.message.innerHTML="",e.wrap.classList.remove("is-invalid")})})}return s(t,[{key:"validateForm",value:function(){var t=this,n=!0;return this.fileFields.forEach(function(e){n=!!t.validateField(e)&&n}),n}},{key:"validateField",value:function(t){var n=this;return t.isValid=!0,t.rules.forEach(function(e){n.validationRules.hasOwnProperty(e)&&!n.validationRules[e].test(t)&&(t.isValid=!1,n.showError(t,n.validationRules[e].error(t.validateName)))}),t.isValid&&this.hideError(t),t.isValid}},{key:"formResult",value:function(){var t=this,n=[];this.fileFields.forEach(function(t){if("radio"===t.type||"checkbox"===t.type){if(!0===t.entry.checked){var e=n.find(function(e){return e.name===t.name});void 0===e?n.push({name:t.name,value:t.entry.value,type:t.type}):e.value+=t.entry.value}}else""!==t.entry.value&&n.push({name:t.name,value:t.entry.value})});var e=n.find(function(e){return"mail"===e.name});void 0===e?n.push({name:"",value:"Do not add to maling list"}):e.value="Add to maling list";n.filter(function(e){return"privacy"!==e.name}).forEach(function(e){0<e.name.length?t.resultInput.innerHTML+="<li><strong>".concat(e.name,"</strong>")+": "+"".concat(e.value,"</li>"):t.resultInput.innerHTML+="<li>".concat(e.value,"</li>")})}},{key:"scrollToElement",value:function(){this.container.classList.toggle("is-sent-success")&&this.container.scrollIntoView({block:"center"})}},{key:"showError",value:function(e,t){e.message.innerHTML=t,e.wrap.classList.add("is-invalid")}},{key:"hideError",value:function(e){e.message.innerHTML="",e.wrap.classList.remove("is-invalid")}}]),t}(),p=function(){function n(e){var t=this;a(this,n),this.$loadMoreBtn=e||null,this.currentPage=1,this.numberOfItems=0,this.$loadMoreBtn&&(this.matrixBlockId=this.$loadMoreBtn.dataset.matrixBlockId,this.categoryId=this.$loadMoreBtn.dataset.categoryId,this.loadMoreURL=this.$loadMoreBtn.dataset.loadMore,this.targetContainerId=this.$loadMoreBtn.dataset.targetContainerId,this.$targetContainer=document.getElementById(this.targetContainerId),this.numberOfItems=this.$targetContainer.childElementCount,this.$loadMoreBtn.addEventListener("click",function(e){t.fireLoading()}))}return s(n,[{key:"fireLoading",value:function(){var t=this,e=this.loadMoreURL+"?page="+this.currentPage+"&categoryId="+this.categoryId+"&matrixBlockId="+this.matrixBlockId;this.currentPage++,fetch(e).then(function(e){return e.json()}).then(function(e){console.log(e),t.drawContent(e.html),e.isLastPage&&(t.$loadMoreBtn.style.display="none")}).catch(function(e){console.log(e)})}},{key:"drawContent",value:function(e){if(this.$targetContainer){this.$targetContainer.innerHTML+=e;var t=this.$targetContainer.childElementCount,n=t-this.numberOfItems;this.fireA11y(this.$targetContainer,n);var r=this.$targetContainer.children[this.numberOfItems];r.querySelector("a")&&r.querySelector("a").focus(),this.numberOfItems=t;var i=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;window.scroll({left:0,top:r.getBoundingClientRect().top+i})}}},{key:"fireA11y",value:function(e,t){var n=document.createElement("span");n.classList.add("visually-hidden"),n.setAttribute("role","alert"),n.innerText=t+" news loaded.",e.insertAdjacentElement("beforebegin",n),setTimeout(function(){n.remove()},3e4)}}]),n}();n(),window.app={header:null,scroll:{disable:o.disablePageScroll,enable:o.enablePageScroll},setInert:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){e.setAttribute("inert",!0)})},removeInert:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){e.removeAttribute("inert")})},initModule:function(t,e){e?Array.prototype.slice.call(document.querySelectorAll(e)).forEach(function(e){new t(e)}):new t},init:function(){window.app.header=new d(".js-header"),window.app.initModule(h,".js-validate"),window.app.initModule(p,".js-load-more"),app.initModule(f,".js-test-api")}},window.addEventListener("DOMContentLoaded",app.init)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
